// Code generated by MockGen. DO NOT EDIT.
// Source: repo_setu.go

// Package repo_setu is a generated GoMock package.
package repo_setu

import (
	context "context"
	reflect "reflect"
	entity "server/pkg/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockRepoSetu is a mock of RepoSetu interface.
type MockRepoSetu struct {
	ctrl     *gomock.Controller
	recorder *MockRepoSetuMockRecorder
}

// MockRepoSetuMockRecorder is the mock recorder for MockRepoSetu.
type MockRepoSetuMockRecorder struct {
	mock *MockRepoSetu
}

// NewMockRepoSetu creates a new mock instance.
func NewMockRepoSetu(ctrl *gomock.Controller) *MockRepoSetu {
	mock := &MockRepoSetu{ctrl: ctrl}
	mock.recorder = &MockRepoSetuMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoSetu) EXPECT() *MockRepoSetuMockRecorder {
	return m.recorder
}

// GetArchiveInfoSlice mocks base method.
func (m *MockRepoSetu) GetArchiveInfoSlice(ctx context.Context, query *entity.Query) (entity.QueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveInfoSlice", ctx, query)
	ret0, _ := ret[0].(entity.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveInfoSlice indicates an expected call of GetArchiveInfoSlice.
func (mr *MockRepoSetuMockRecorder) GetArchiveInfoSlice(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveInfoSlice", reflect.TypeOf((*MockRepoSetu)(nil).GetArchiveInfoSlice), ctx, query)
}
